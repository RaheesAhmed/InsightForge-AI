generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String        @id @default(cuid())
  name              String?
  email             String        @unique
  image             String?
  subscription      Subscription?
  documents         Document[]
  questions         Question[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  SUSPENDED
  PAYMENT_FAILED
}

model Subscription {
  id                   String            @id @default(cuid())
  userId               String            @unique
  user                 User              @relation(fields: [userId], references: [id])
  paypalSubscriptionId String?           @unique
  plan                 Plan              @default(FREE)
  status              SubscriptionStatus @default(ACTIVE)
  documentsLimit      Int               @default(3)
  questionsLimit      Int               @default(20)
  documentsUsed       Int               @default(0)
  questionsUsed       Int               @default(0)
  validUntil          DateTime
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  paymentHistory      Payment[]
}

enum PaymentStatus {
  SUCCESS
  FAILED
  PENDING
}

model Payment {
  id             String         @id @default(cuid())
  subscriptionId String
  subscription   Subscription   @relation(fields: [subscriptionId], references: [id])
  amount         Float
  currency       String
  status         PaymentStatus
  paypalOrderId  String?       @unique
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([subscriptionId])
}

model Document {
  id            String    @id @default(cuid())
  title         String
  description   String?
  content       String    @db.Text
  uploadedBy    String    // User ID
  user          User      @relation(fields: [uploadedBy], references: [id])
  isPublic      Boolean   @default(false)
  questions     Question[]
  vectorId      String?   // Reference to vector store
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Question {
  id            String    @id @default(cuid())
  content       String
  answer        String    @db.Text
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  documentId    String
  document      Document  @relation(fields: [documentId], references: [id])
  createdAt     DateTime  @default(now())
}

enum Role {
  ADMIN
  USER
}

enum Plan {
  FREE
  BASIC
  PREMIUM
  ENTERPRISE
}

enum Status {
  ACTIVE
  CANCELLED
  SUSPENDED
}