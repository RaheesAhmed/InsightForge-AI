generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String       @id @default(cuid())
  email                 String       @unique
  name                  String?
  role                  String       @default("USER") // USER, ADMIN
  subscription          Subscription?
  documents            Document[]
  questions            Question[]
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  questionsUsed        Int          @default(0)
  documentsUploaded    Int          @default(0)
  subscriptionPlan     String       @default("FREE") // FREE, PROFESSIONAL, ENTERPRISE
  subscriptionStatus   String       @default("ACTIVE") // ACTIVE, SUSPENDED, CANCELLED
  subscriptionValidUntil DateTime   @default(dbgenerated("NOW() + interval '30 days'"))
}

model Subscription {
  id                  String    @id @default(cuid())
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String    @unique
  plan                String    @default("FREE") // FREE, PROFESSIONAL, ENTERPRISE
  status              String    @default("ACTIVE") // ACTIVE, SUSPENDED, CANCELLED
  questionsLimit      Int       @default(20)
  documentsLimit      Int       @default(3)
  questionsUsed       Int       @default(0)
  documentsUsed       Int       @default(0)
  validUntil          DateTime  @default(dbgenerated("NOW() + interval '30 days'"))
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model Document {
  id          String    @id @default(cuid())
  title       String
  content     String
  description String?
  user        User      @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)
  uploadedBy  String
  isPublic    Boolean   @default(false)
  vectorId    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Question {
  id          String    @id @default(cuid())
  content     String
  answer      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  documentId  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model AdminLog {
  id          String    @id @default(cuid())
  action      String
  adminId     String
  targetUserId String?
  details     String
  createdAt   DateTime  @default(now())
}